id,code,num_chars,num_lines,functions,classes,imports,patterns,tokens
0,"def fib(n):
    if n <= 1:
        return n
    return fib(n-1) + fib(n-2)",76,6,['fib'],[],[],"{'list_comprehension': False, 'decorator': False, 'recursion': True, 'async': False}","[('NAME', 'def'), ('NAME', 'fib'), ('OP', '('), ('NAME', 'n'), ('OP', ')'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '    '), ('NAME', 'if'), ('NAME', 'n'), ('OP', '<='), ('NUMBER', '1'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '        '), ('NAME', 'return'), ('NAME', 'n'), ('NEWLINE', '\n'), ('DEDENT', ''), ('NAME', 'return'), ('NAME', 'fib'), ('OP', '('), ('NAME', 'n'), ('OP', '-'), ('NUMBER', '1'), ('OP', ')'), ('OP', '+'), ('NAME', 'fib'), ('OP', '('), ('NAME', 'n'), ('OP', '-'), ('NUMBER', '2'), ('OP', ')'), ('NEWLINE', '\n'), ('DEDENT', '')]"
1,"class Stack:
    def __init__(self):
        self.items = []
    def push(self, x):
        self.items.append(x)
    def pop(self):
        return self.items.pop()",165,9,"['__init__', 'push', 'pop']",['Stack'],[],"{'list_comprehension': False, 'decorator': False, 'recursion': False, 'async': False}","[('NAME', 'class'), ('NAME', 'Stack'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '    '), ('NAME', 'def'), ('NAME', '__init__'), ('OP', '('), ('NAME', 'self'), ('OP', ')'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '        '), ('NAME', 'self'), ('OP', '.'), ('NAME', 'items'), ('OP', '='), ('OP', '['), ('OP', ']'), ('NEWLINE', '\n'), ('DEDENT', ''), ('NAME', 'def'), ('NAME', 'push'), ('OP', '('), ('NAME', 'self'), ('OP', ','), ('NAME', 'x'), ('OP', ')'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '        '), ('NAME', 'self'), ('OP', '.'), ('NAME', 'items'), ('OP', '.'), ('NAME', 'append'), ('OP', '('), ('NAME', 'x'), ('OP', ')'), ('NEWLINE', '\n'), ('DEDENT', ''), ('NAME', 'def'), ('NAME', 'pop'), ('OP', '('), ('NAME', 'self'), ('OP', ')'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '        '), ('NAME', 'return'), ('NAME', 'self'), ('OP', '.'), ('NAME', 'items'), ('OP', '.'), ('NAME', 'pop'), ('OP', '('), ('OP', ')'), ('NEWLINE', '\n'), ('DEDENT', ''), ('DEDENT', '')]"
2,"import math
def is_prime(n):
    if n < 2: return False
    for i in range(2, int(math.sqrt(n))+1):
        if n % i == 0:
            return False
    return True",165,9,['is_prime'],[],['math'],"{'list_comprehension': False, 'decorator': False, 'recursion': False, 'async': False}","[('NAME', 'import'), ('NAME', 'math'), ('NEWLINE', '\n'), ('NAME', 'def'), ('NAME', 'is_prime'), ('OP', '('), ('NAME', 'n'), ('OP', ')'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '    '), ('NAME', 'if'), ('NAME', 'n'), ('OP', '<'), ('NUMBER', '2'), ('OP', ':'), ('NAME', 'return'), ('NAME', 'False'), ('NEWLINE', '\n'), ('NAME', 'for'), ('NAME', 'i'), ('NAME', 'in'), ('NAME', 'range'), ('OP', '('), ('NUMBER', '2'), ('OP', ','), ('NAME', 'int'), ('OP', '('), ('NAME', 'math'), ('OP', '.'), ('NAME', 'sqrt'), ('OP', '('), ('NAME', 'n'), ('OP', ')'), ('OP', ')'), ('OP', '+'), ('NUMBER', '1'), ('OP', ')'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '        '), ('NAME', 'if'), ('NAME', 'n'), ('OP', '%'), ('NAME', 'i'), ('OP', '=='), ('NUMBER', '0'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '            '), ('NAME', 'return'), ('NAME', 'False'), ('NEWLINE', '\n'), ('DEDENT', ''), ('DEDENT', ''), ('NAME', 'return'), ('NAME', 'True'), ('NEWLINE', '\n'), ('DEDENT', '')]"
3,"from functools import lru_cache
@lru_cache(maxsize=None)
def ways(n):
    if n<=1: return 1
    return ways(n-1) + ways(n-2)",126,7,['ways'],[],['functools.lru_cache'],"{'list_comprehension': False, 'decorator': True, 'recursion': True, 'async': False}","[('NAME', 'from'), ('NAME', 'functools'), ('NAME', 'import'), ('NAME', 'lru_cache'), ('NEWLINE', '\n'), ('OP', '@'), ('NAME', 'lru_cache'), ('OP', '('), ('NAME', 'maxsize'), ('OP', '='), ('NAME', 'None'), ('OP', ')'), ('NEWLINE', '\n'), ('NAME', 'def'), ('NAME', 'ways'), ('OP', '('), ('NAME', 'n'), ('OP', ')'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '    '), ('NAME', 'if'), ('NAME', 'n'), ('OP', '<='), ('NUMBER', '1'), ('OP', ':'), ('NAME', 'return'), ('NUMBER', '1'), ('NEWLINE', '\n'), ('NAME', 'return'), ('NAME', 'ways'), ('OP', '('), ('NAME', 'n'), ('OP', '-'), ('NUMBER', '1'), ('OP', ')'), ('OP', '+'), ('NAME', 'ways'), ('OP', '('), ('NAME', 'n'), ('OP', '-'), ('NUMBER', '2'), ('OP', ')'), ('NEWLINE', '\n'), ('DEDENT', '')]"
4,"def quicksort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr)//2]
    left = [x for x in arr if x < pivot]
    mid = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + mid + quicksort(right)",267,10,['quicksort'],[],[],"{'list_comprehension': True, 'decorator': False, 'recursion': True, 'async': False}","[('NAME', 'def'), ('NAME', 'quicksort'), ('OP', '('), ('NAME', 'arr'), ('OP', ')'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '    '), ('NAME', 'if'), ('NAME', 'len'), ('OP', '('), ('NAME', 'arr'), ('OP', ')'), ('OP', '<='), ('NUMBER', '1'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '        '), ('NAME', 'return'), ('NAME', 'arr'), ('NEWLINE', '\n'), ('DEDENT', ''), ('NAME', 'pivot'), ('OP', '='), ('NAME', 'arr'), ('OP', '['), ('NAME', 'len'), ('OP', '('), ('NAME', 'arr'), ('OP', ')'), ('OP', '//'), ('NUMBER', '2'), ('OP', ']'), ('NEWLINE', '\n'), ('NAME', 'left'), ('OP', '='), ('OP', '['), ('NAME', 'x'), ('NAME', 'for'), ('NAME', 'x'), ('NAME', 'in'), ('NAME', 'arr'), ('NAME', 'if'), ('NAME', 'x'), ('OP', '<'), ('NAME', 'pivot'), ('OP', ']'), ('NEWLINE', '\n'), ('NAME', 'mid'), ('OP', '='), ('OP', '['), ('NAME', 'x'), ('NAME', 'for'), ('NAME', 'x'), ('NAME', 'in'), ('NAME', 'arr'), ('NAME', 'if'), ('NAME', 'x'), ('OP', '=='), ('NAME', 'pivot'), ('OP', ']'), ('NEWLINE', '\n'), ('NAME', 'right'), ('OP', '='), ('OP', '['), ('NAME', 'x'), ('NAME', 'for'), ('NAME', 'x'), ('NAME', 'in'), ('NAME', 'arr'), ('NAME', 'if'), ('NAME', 'x'), ('OP', '>'), ('NAME', 'pivot'), ('OP', ']'), ('NEWLINE', '\n'), ('NAME', 'return'), ('NAME', 'quicksort'), ('OP', '('), ('NAME', 'left'), ('OP', ')'), ('OP', '+'), ('NAME', 'mid'), ('OP', '+'), ('NAME', 'quicksort'), ('OP', '('), ('NAME', 'right'), ('OP', ')'), ('NEWLINE', '\n'), ('DEDENT', '')]"
5,"async def fetch(session, url):
    async with session.get(url) as resp:
        return await resp.text()",106,5,[],[],[],"{'list_comprehension': False, 'decorator': False, 'recursion': False, 'async': True}","[('NAME', 'async'), ('NAME', 'def'), ('NAME', 'fetch'), ('OP', '('), ('NAME', 'session'), ('OP', ','), ('NAME', 'url'), ('OP', ')'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '    '), ('NAME', 'async'), ('NAME', 'with'), ('NAME', 'session'), ('OP', '.'), ('NAME', 'get'), ('OP', '('), ('NAME', 'url'), ('OP', ')'), ('NAME', 'as'), ('NAME', 'resp'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '        '), ('NAME', 'return'), ('NAME', 'await'), ('NAME', 'resp'), ('OP', '.'), ('NAME', 'text'), ('OP', '('), ('OP', ')'), ('NEWLINE', '\n'), ('DEDENT', ''), ('DEDENT', '')]"
6,"def flatten(lst):
    return [x for sub in lst for x in sub]",62,4,['flatten'],[],[],"{'list_comprehension': True, 'decorator': False, 'recursion': False, 'async': False}","[('NAME', 'def'), ('NAME', 'flatten'), ('OP', '('), ('NAME', 'lst'), ('OP', ')'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '    '), ('NAME', 'return'), ('OP', '['), ('NAME', 'x'), ('NAME', 'for'), ('NAME', 'sub'), ('NAME', 'in'), ('NAME', 'lst'), ('NAME', 'for'), ('NAME', 'x'), ('NAME', 'in'), ('NAME', 'sub'), ('OP', ']'), ('NEWLINE', '\n'), ('DEDENT', '')]"
7,"class Node:
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def inorder(root):
    if root:
        inorder(root.left)
        print(root.val)
        inorder(root.right)",252,13,"['inorder', '__init__']",['Node'],[],"{'list_comprehension': False, 'decorator': False, 'recursion': True, 'async': False}","[('NAME', 'class'), ('NAME', 'Node'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '    '), ('NAME', 'def'), ('NAME', '__init__'), ('OP', '('), ('NAME', 'self'), ('OP', ','), ('NAME', 'val'), ('OP', ','), ('NAME', 'left'), ('OP', '='), ('NAME', 'None'), ('OP', ','), ('NAME', 'right'), ('OP', '='), ('NAME', 'None'), ('OP', ')'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '        '), ('NAME', 'self'), ('OP', '.'), ('NAME', 'val'), ('OP', '='), ('NAME', 'val'), ('NEWLINE', '\n'), ('NAME', 'self'), ('OP', '.'), ('NAME', 'left'), ('OP', '='), ('NAME', 'left'), ('NEWLINE', '\n'), ('NAME', 'self'), ('OP', '.'), ('NAME', 'right'), ('OP', '='), ('NAME', 'right'), ('NEWLINE', '\n'), ('DEDENT', ''), ('DEDENT', ''), ('NAME', 'def'), ('NAME', 'inorder'), ('OP', '('), ('NAME', 'root'), ('OP', ')'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '    '), ('NAME', 'if'), ('NAME', 'root'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '        '), ('NAME', 'inorder'), ('OP', '('), ('NAME', 'root'), ('OP', '.'), ('NAME', 'left'), ('OP', ')'), ('NEWLINE', '\n'), ('NAME', 'print'), ('OP', '('), ('NAME', 'root'), ('OP', '.'), ('NAME', 'val'), ('OP', ')'), ('NEWLINE', '\n'), ('NAME', 'inorder'), ('OP', '('), ('NAME', 'root'), ('OP', '.'), ('NAME', 'right'), ('OP', ')'), ('NEWLINE', '\n'), ('DEDENT', ''), ('DEDENT', '')]"
8,"def binary_search(arr, target):
    l, r = 0, len(arr)-1
    while l <= r:
        m = (l + r)//2
        if arr[m] == target:
            return m
        elif arr[m] < target:
            l = m + 1
        else:
            r = m - 1
    return -1",251,13,['binary_search'],[],[],"{'list_comprehension': False, 'decorator': False, 'recursion': False, 'async': False}","[('NAME', 'def'), ('NAME', 'binary_search'), ('OP', '('), ('NAME', 'arr'), ('OP', ','), ('NAME', 'target'), ('OP', ')'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '    '), ('NAME', 'l'), ('OP', ','), ('NAME', 'r'), ('OP', '='), ('NUMBER', '0'), ('OP', ','), ('NAME', 'len'), ('OP', '('), ('NAME', 'arr'), ('OP', ')'), ('OP', '-'), ('NUMBER', '1'), ('NEWLINE', '\n'), ('NAME', 'while'), ('NAME', 'l'), ('OP', '<='), ('NAME', 'r'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '        '), ('NAME', 'm'), ('OP', '='), ('OP', '('), ('NAME', 'l'), ('OP', '+'), ('NAME', 'r'), ('OP', ')'), ('OP', '//'), ('NUMBER', '2'), ('NEWLINE', '\n'), ('NAME', 'if'), ('NAME', 'arr'), ('OP', '['), ('NAME', 'm'), ('OP', ']'), ('OP', '=='), ('NAME', 'target'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '            '), ('NAME', 'return'), ('NAME', 'm'), ('NEWLINE', '\n'), ('DEDENT', ''), ('NAME', 'elif'), ('NAME', 'arr'), ('OP', '['), ('NAME', 'm'), ('OP', ']'), ('OP', '<'), ('NAME', 'target'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '            '), ('NAME', 'l'), ('OP', '='), ('NAME', 'm'), ('OP', '+'), ('NUMBER', '1'), ('NEWLINE', '\n'), ('DEDENT', ''), ('NAME', 'else'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '            '), ('NAME', 'r'), ('OP', '='), ('NAME', 'm'), ('OP', '-'), ('NUMBER', '1'), ('NEWLINE', '\n'), ('DEDENT', ''), ('DEDENT', ''), ('NAME', 'return'), ('OP', '-'), ('NUMBER', '1'), ('NEWLINE', '\n'), ('DEDENT', '')]"
9,"import requests

def download(url, dest):
    r = requests.get(url)
    with open(dest, 'wb') as f:
        f.write(r.content)",128,8,['download'],[],['requests'],"{'list_comprehension': False, 'decorator': False, 'recursion': False, 'async': False}","[('NAME', 'import'), ('NAME', 'requests'), ('NEWLINE', '\n'), ('NAME', 'def'), ('NAME', 'download'), ('OP', '('), ('NAME', 'url'), ('OP', ','), ('NAME', 'dest'), ('OP', ')'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '    '), ('NAME', 'r'), ('OP', '='), ('NAME', 'requests'), ('OP', '.'), ('NAME', 'get'), ('OP', '('), ('NAME', 'url'), ('OP', ')'), ('NEWLINE', '\n'), ('NAME', 'with'), ('NAME', 'open'), ('OP', '('), ('NAME', 'dest'), ('OP', ','), ('STRING', ""'wb'""), ('OP', ')'), ('NAME', 'as'), ('NAME', 'f'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '        '), ('NAME', 'f'), ('OP', '.'), ('NAME', 'write'), ('OP', '('), ('NAME', 'r'), ('OP', '.'), ('NAME', 'content'), ('OP', ')'), ('NEWLINE', '\n'), ('DEDENT', ''), ('DEDENT', '')]"
10,"def decorator_example(func):
    def wrapper(*args, **kwargs):
        print('Before')
        result = func(*args, **kwargs)
        print('After')
        return result
    return wrapper",191,9,"['decorator_example', 'wrapper']",[],[],"{'list_comprehension': False, 'decorator': False, 'recursion': False, 'async': False}","[('NAME', 'def'), ('NAME', 'decorator_example'), ('OP', '('), ('NAME', 'func'), ('OP', ')'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '    '), ('NAME', 'def'), ('NAME', 'wrapper'), ('OP', '('), ('OP', '*'), ('NAME', 'args'), ('OP', ','), ('OP', '**'), ('NAME', 'kwargs'), ('OP', ')'), ('OP', ':'), ('NEWLINE', '\n'), ('INDENT', '        '), ('NAME', 'print'), ('OP', '('), ('STRING', ""'Before'""), ('OP', ')'), ('NEWLINE', '\n'), ('NAME', 'result'), ('OP', '='), ('NAME', 'func'), ('OP', '('), ('OP', '*'), ('NAME', 'args'), ('OP', ','), ('OP', '**'), ('NAME', 'kwargs'), ('OP', ')'), ('NEWLINE', '\n'), ('NAME', 'print'), ('OP', '('), ('STRING', ""'After'""), ('OP', ')'), ('NEWLINE', '\n'), ('NAME', 'return'), ('NAME', 'result'), ('NEWLINE', '\n'), ('DEDENT', ''), ('NAME', 'return'), ('NAME', 'wrapper'), ('NEWLINE', '\n'), ('DEDENT', '')]"
